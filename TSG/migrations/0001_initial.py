# Generated by Django 2.0.13 on 2022-04-20 14:24

import TSG.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15)),
                ('region', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Entrance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Flat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=10)),
                ('square', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('floor', models.IntegerField(validators=[TSG.models.validate_int_greater_zero])),
                ('entrance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TSG.Entrance')),
            ],
        ),
        migrations.CreateModel(
            name='House',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=100)),
                ('floor_count', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=25)),
                ('next_check_date', models.DateField(null=True)),
                ('workability', models.BooleanField()),
                ('flat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TSG.Flat')),
            ],
        ),
        migrations.CreateModel(
            name='MeterData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('send_date', models.DateField(default=django.utils.timezone.now)),
                ('value', models.DecimalField(decimal_places=3, max_digits=15)),
                ('meter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TSG.Meter')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Tsg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('legal_address', models.CharField(max_length=100)),
                ('inn', models.CharField(max_length=10, validators=[TSG.models.validate_inn])),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='tsg',
            name='bookkeeper',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookkeeperTsg', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tsg',
            name='chairman',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='chairTsg', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='resourcetype',
            name='TSG',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TSG.Tsg'),
        ),
        migrations.AddField(
            model_name='meter',
            name='resource_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TSG.ResourceType'),
        ),
        migrations.AddField(
            model_name='house',
            name='TSG',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TSG.Tsg'),
        ),
        migrations.AddField(
            model_name='house',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TSG.City'),
        ),
        migrations.AddField(
            model_name='entrance',
            name='house',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TSG.House'),
        ),
    ]
